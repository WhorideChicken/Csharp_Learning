Generic - 제네릭
자료 구조들을 선언 할 때 자료형을 지정해 줘야했습니다.
ex> List<int> int[], Dictionary<int, string>

하지만, Class나 함수를 자료형 마다 계속 생산하는것은 비효율적이기 때문에 
이를 효율적으로 활용하는 방안은 2가지가 있습니다.

[object] : object 타입
*var 타입은 우리가 자료형을 명시적으로 선언해주지 않아도 컴파일러가 맞춰줍니다.

object 타입으로 선언하는 방식입니다. object는 최상위 Class이기 때문에 모든 자료형을 소화할 수 있지만
박싱 언박싱이 일어나기 때문에 매우 느립니다.
-> int는 stack에 올라가는 값형식이지만 object는 힙에 올라가는 참조 타입입니다.

object a = 3;
int n = (int)a;

위 구문을 보면 내부적으론 a가 항달 될 때 힙에 3을 저장하는 공간을 만든 후 a의 주소를 가르칩니다.
n을 할당 할 때는 a의 주소값을 참조하여 값을 복사 후 n에 할당을합니다.
위의 연산(언방싱)을 거치기 때문에 object 타입은 느리다는 단점이 존재합니다.


[일반화 형식<T>]
<T> 선언된 Class나 함수는 어떠한 자료형이 와도 대응이 됩니다.

Class MyGeneric<T>
{
    T[] arr = new T[10];
}

위의 클래스를 보면 해당 클래스에 한하여 어떤 자료형이 와도 10개의 배열을 생성합니다.

class TestClass<T> where T : struct
{
   //where T : 조건
   조건을 달 수 있습니다.
   [조건]
   struct : T는 값형식의 자료형이어야한다.
   class : T는 참조형식의 자료형이어야한다.
   new() : 해당 class에는 어떠한 인자도 받지 않는 기본 생성자가 있어야한다.
   "Class Name" : 해당 Class이거나 상속 받는 형식이어야한다.
}


void MutiCalculaltor<T>(T data, T data2)
{
    data * data2 -> 어떠한 자료형이 와도 data * data2를 곱하여 내보냅니다.
}


이와 같은 방식은 몇가지 규칙이 있으나 박싱, 언박싱으로부터 자유로워 속도 측면에서 효율적입니다.