[Delegate]
대리자라고하며 콜백 방식이라 부릅니다.
콜백 : 특정 함수를 호출 할 떄 인자로 함수를 전달하여 해당 함수를 동작하도록 호출하는 방식

- 함수 앞에 delegate를 붙여 사용합니다.
- -=/+= 연산으로 객체를 만들어 할당 및 추가를 할 수도 있습니다.

델리게이트 선언
delegate int IntFunc();

델리게이트를 인자로 받는 함수
void Testvoid(IntFunc fun)
{
    fun();
}

int TestFunc()
{
    return 1;
}

int TestFunc2()
{
    return 0;
}

IntFunc은 int를 반환하는 함수이므로 int를 반환하는 함수를 인자로 넘길 수 있다.
Testvoid(TestFunc);

객체로도 생성 할 수 있으며 기본 함수도 지정 할 수 있다.
Intfunc test = new Intfunc(TestFunc);

함수를 추가 제거 할 수 있다
test += TestFunc2;
test -= TestFunc2;

생성된 델리게이트 객체는 인자로도 전달이 가능하다.
Testvoid(test);

* 델리게이트에는 치명적인  단점이 존재합니다.
Intfunc test = new Intfunc(TestFunc) 이렇게 되면
test() 처럼 접근이 쉽고 누구나 호출 할 수 있게 됩니다.

해당 함수가 매우 중요한 동작일 경우, 다른곳에서 호출이 가능해지면 프로젝트의 버그 위험성이 매우 높아집니다.

이를 보완하는 기능이 Evet라는 문법입니다.

[Event]
* 특정 이벤트가 발생하면 이를 등록한 오브젝트 클레스들에게 아림을 주는 동작이며
이를 옵져버 패턴이라고도 부릅니다.

- Event와 delegate의 한정자의 일관성을 맞춰줍니다.
ex) delegate가 public이면 Event도 public

OnEvnet delegate 타입의 MyEvent event는 a키가 눌리면 동작하도록 하는

class EventManage
{
    public delegate void OnEvnet();
    public evet OnEvnet MyEvent;

    public void Update()
    {
        if(input == a)
        {
            MyEvent();
        }
    }
}

EvnetManager에 함수를 등록할 Player 클래스
class Player
{
    A가 눌렸을 때 동작할 함수
    void OnPressA()
    {

    }
    
    이벤트 매니저 객체를 만들고 Event에 OnPressA를 등록 시켜두면 a가 눌렸을 때 OnPressA가 동작한다.
    EventManage mng = new EventManage();
    mng.MyEvent += OnPressA;
}

위와 같은 구조로 구현을하면 delegate와 달리 함수로 호출 할 수없어 위험한 호출을 막을 수 있습니다.

* 델리게이 또한 제네릭하게 사용할 수 있지만 c#에서 기본적으로 제공해줍니다.
Func이라는 키워드와 Action이라는 키워드입니다.
Func은 return 존재하는 델리게이트를 사용할 때 활용하며
Action은 void 함수를 위한 제네릭한 delegate입니다.


<> 구조의 가장 마지막 인자는 reutn되는 값이며 그앞의 인자들은 매개변수입니다.
Func<T, TResult> TestFunc;

<> 구조는 매개변수들입니다.
Action<T> TestFunc;

둘다 return을 제외하고 매개변수는 최대 16개까지 가능