[추상 클레스]
: 설계를 할 때 행위에 강요를 주는 문법이다.

- abstract 키워드를 사용합니다.
- 추상 클래스는 단일 객체로 생성 할 수 없습니다. new classname() 불가능(인스턴스화 불가능)

[추상 메서드]
- 추상 클레스 내에서 선언이 가능합니다. 함수 앞에 abstract 키워드를 붙이입니다.
- 추상 클레스를 상속 받는 클레스는 추상 메서드를 무조건 재정의해야합니다.
- 추상 메서드는 내용은 정의를 못하고 선언만 할 수 있습니다.

[가상 함수]
- 가상함수는 virtual 키워드를 붙입니다.
- 가상 함수는 상속 받는 클레스로부터 재정의가 가능하도록 기회를 줍니다.
- 가상 함수는 무조건 재의를 할 필요가 없습니다.

abstract class A
{
    public virtual void FuncA(){}

    public abstarct void FuncB();
}


[인터페이스]
인터페이스에 들어가기 앞서 C#에서 다중 상속이 불가능한 내용의 이해가 필요합니다.

*죽은의 다이아몬드 현상
- 각기 다른 A,B 두 개의 틀래스에서 O라는 클레스를 상속 받은 상태 O 클래스에는 추상 함수가 있어 A, B 둘 다 재정의 상태
- A,B를 다중 상속 받은 C 클레스
- C 클레스에서 재정의가 된 함수를 호출 했을 때 A, B중 어떤 함수를 호출했는지 모호해 집니다.

이러한 내용 처럼 다이아몬드 모먕의 구조에서는 망가지기 때문에 C#에서는 다중 상속을 막았습니다.

개발을 하다 보면 다중 상속이 필요할 경우가 있습니다.
함수 구조는 물려 받지만 내용은 새로 재정의 하도록하는 문법으로 인터페이스가 존재합니다.

- 인터페이스 이름은 대문자 I로 시작하는것이 통상적인 컨벤션입니다.
- 인터페이스는 함수의 구현을 요구하기 때문에 public private 등의 수식어가 따로 필요없이 함수만 정의합니다.
- 인터페이스를 상속 받으면 무조건 구현을 해야합니다.
- 인터페이스는 추상 함수처럼 내부 내용을 정의하지 않습니다.
- 인터페이스는 재정의가 아니라 필수 구현입니다.
- 인터페이스는 추상 클래스와 달리 인스턴스화가 가능합니다.

interface Imyinterfate()
{
    void MUst();
}
